<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
string routePrefix = "/api/" + ModelVariable;
#>
using System;
using System.Collections.Generic;
using System.Data.Entity.Infrastructure;
using System.Threading.Tasks;
using System.Web.Http;
using AutoMapper;
using Saned.ArousQatar.Api.Infrastructure.Core;
using Saned.ArousQatar.Api.Models;
using Saned.ArousQatar.Data.Core;
using Saned.ArousQatar.Data.Core.Models;

namespace Saned.ArousQatar.Api.Controllers {
<#
	var entitySetName = ModelMetadata.EntitySetName;
	var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
	var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
	var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
	var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
	var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
#>
	[RoutePrefix("<#= routePrefix #>")]
	public class <#= ModelTypeName #>Controller : ApiControllerBase
	{
		public <#= ModelTypeName #>Controller( IUnitOfWork unitOfWork ) :
			base( unitOfWork ) {

		}

		// GET: <#= routePrefix #>/search/1/4?filter=??
		[Route("search/{page:int=0}/{pageSize=4}/{filter?}")]
		public async Task<IHttpActionResult> GetAll(int? page, int? pageSize, string filter = "")
        {
            IHttpActionResult response = null;
            try
            {
                int currentPage = page.Value;
                int currentPageSize = pageSize.Value;
                int totalCount = 0;


                var all<#= ModelVariable #> = await _unitOfWork.<#= entitySetName#>.GetAllAsync((currentPage-1) * currentPageSize, currentPageSize, filter);
                totalCount = await _unitOfWork.<#= entitySetName#>.CountAsync();

                var all<#= ModelVariable#>Vm = Mapper.Map<List<<#= ModelTypeName#>>, List<<#= ModelTypeName#>ViewModel>>(all<#= ModelVariable #>);


                PaginationSet<<#= ModelTypeName#>ViewModel> pagedSet = new PaginationSet<<#= ModelTypeName#>ViewModel>()
                {
                    Items = all<#= ModelVariable#>Vm,
                    Page = currentPage,
                    TotalCount = totalCount,
                    TotalPages = (int)Math.Ceiling((decimal)totalCount / currentPageSize)
                };

                response = Ok(pagedSet);
            }
            catch (DbUpdateConcurrencyException ex)
            {
                LogError(ex);
                response = NotFound();
            }
            catch (DbUpdateException ex)
            {
                LogError(ex);
                response = BadRequest(ex.InnerException.Message);
            }

            catch (Exception ex)
            {
                LogError(ex);
                response = InternalServerError(ex);
            }

            return response;
        }

		public async Task<IHttpActionResult> GetAll( ) {
			IHttpActionResult response;
			try {
				var all<#= ModelVariable #> = await _unitOfWork.<#= entitySetName #>.GetAllAsync( );
				var all<#= ModelVariable #>Vm = Mapper.Map<List<<#= ModelTypeName #>> , List<<#= ModelTypeName #>ViewModel>>( all<#= ModelVariable #> );

				response = Ok( all<#= ModelVariable #>Vm );
			} catch ( DbUpdateConcurrencyException ex ) {
				LogError( ex );
				response = NotFound( );
			} catch ( DbUpdateException ex ) {
				LogError( ex );
				response = BadRequest( ex.InnerException?.Message );
			} catch ( Exception ex ) {
				LogError( ex );
				response = InternalServerError( ex );
			}

			return response;
		}
		


		// GET: <#= routePrefix #>/5
		//[ResponseType(typeof(<#= ModelTypeName #>))]
		[Route( "{id:int}" )]
		[HttpGet]
		public async Task<IHttpActionResult> GetSingle( int id ) {
			try {
				var <#= ModelVariable #> = await ( _unitOfWork.<#= entitySetName #>.GetSingleAsync( id ) );
				// ReSharper disable once PossibleInvalidOperationException
				if ( <#= ModelVariable #> == null || <#= ModelVariable #>.IsArchieved.Value )
					return NotFound( );

				var <#= ModelVariable #>Vm = Mapper.Map<<#= ModelTypeName #> , <#= ModelTypeName #>ViewModel>( <#= ModelVariable #> );

				return Ok( <#= ModelVariable #>Vm );

			} catch ( DbUpdateConcurrencyException ex ) {
				LogError( ex );
				return NotFound( );
			} catch ( DbUpdateException ex ) {
				LogError( ex );
				return BadRequest( ex.InnerException?.Message );
			} catch ( Exception ex ) {
				LogError( ex );
				return InternalServerError( ex );
			}


		}



		// POST: <#= routePrefix #>/update/5?
		//[ResponseType(typeof(void))]
		[HttpPost]
		[Route( "update/{id:int}" )]
		public async Task<IHttpActionResult> Update<#= ModelTypeName #>( <#= ModelTypeName #>ViewModel model ) {
			IHttpActionResult response;
			if ( !ModelState.IsValid )
				return BadRequest( ModelState );

			try {
				if ( model.Id == 0 ) {

					#region Adding

					<#= ModelTypeName #> <#= ModelVariable #> = new <#= ModelTypeName #>();
					// the only thing left
					<#= ModelVariable #>.Update( model );

					//Don't Miss Here File Upload

					_unitOfWork.<#= entitySetName #>.Add( <#= ModelVariable #> );

					#endregion
				} else {
					#region Update

					var <#= ModelVariable #> = await ( _unitOfWork.<#= entitySetName #>.GetSingleAsync( model.Id ) );

					// ReSharper disable once PossibleInvalidOperationException
					if ( <#= ModelVariable #> == null || <#= ModelVariable #>.IsArchieved.Value ) {
						return NotFound( );
					}

					<#= ModelVariable #>.Update( model );

					//Dont Miss Here File Upload

					_unitOfWork.<#= entitySetName #>.Edit( <#= ModelVariable #> );

					#endregion

				}
				await _unitOfWork.CommitAsync( );

				response = Ok( model );
			} catch ( DbUpdateConcurrencyException ex ) {
				LogError( ex );
				response = NotFound( );
			} catch ( Exception ex ) {
				LogError( ex );
				response = InternalServerError( ex );
			}
			return response;
		}

		// DELETE: <#= routePrefix #>/delete/5
		//[ResponseType(typeof(<#= ModelTypeName #>))]
		[HttpPost]
		[Route( "delete/{id:int}" )]
		public async Task<IHttpActionResult> Delete( int id ) {
			IHttpActionResult response;

			try {
				var <#= ModelVariable #> = await ( _unitOfWork.<#= entitySetName #>.GetSingleAsync( id ) );

				if ( <#= ModelVariable #> == null ) {
					return NotFound( );
				}

				//check if there is relations

				_unitOfWork.<#= entitySetName #>.Delete( <#= ModelVariable #> );

				await _unitOfWork.CommitAsync( );
				response = Ok( );
			} catch ( Exception ex ) {
				LogError( ex );
				response = InternalServerError( ex );
			}

			return response;
		}
		
		// Archive: <#= routePrefix #>/archive/5
		//[ResponseType(typeof(<#= ModelTypeName #>))]
		[HttpPost]
		[Route( "archive/{id:int}" )]
		public async Task<IHttpActionResult> Archive( int id ) {
			IHttpActionResult response;

			try {
				var <#= ModelVariable #> = await ( _unitOfWork.<#= entitySetName #>.GetSingleAsync( id ) );

				if ( <#= ModelVariable #> == null ) {
					return NotFound( );
				}

				if ( <#= ModelVariable #>.IsArchieved != null && <#= ModelVariable #>.IsArchieved.Value )
					return BadRequest( "التصنيف مأرشف بالفعل" );

				//check if there is relations

				<#= ModelVariable #>.IsArchieved = true;
				_unitOfWork.<#= entitySetName #>.Edit( <#= ModelVariable #> );
				await _unitOfWork.CommitAsync( );
				response = Ok( );
			} catch ( Exception ex ) {
				LogError( ex );
				response = InternalServerError( ex );
			}

			return response;
		}

		
		// DeArchive: <#= routePrefix #>/dearchive/5
		//[ResponseType(typeof(<#= ModelTypeName #>))]
		[HttpPost]
		[Route( "dearchive/{id:int}" )]
		public async Task<IHttpActionResult> DeArchive( int id ) {
			IHttpActionResult response;

			try {
				var <#= ModelVariable #> = await ( _unitOfWork.<#= entitySetName #>.GetSingleAsync( id ) );

				if ( <#= ModelVariable #> == null ) {
					return NotFound( );
				}

				if ( <#= ModelVariable #>.IsArchieved != null && !<#= ModelVariable #>.IsArchieved.Value )
					return BadRequest( "التصنيف غير مأرشف" );

				//check if there is relations
				
				<#= ModelVariable #>.IsArchieved = false;
				_unitOfWork.<#= entitySetName #>.Edit( <#= ModelVariable #> );
				await _unitOfWork.CommitAsync( );
				response = Ok( );
			} catch ( Exception ex ) {
				LogError( ex );
				response = InternalServerError( ex );
			}

			return response;
		}
	}
}